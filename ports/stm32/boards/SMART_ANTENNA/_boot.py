"""
Enable USB for communication, falling back to UART3 to ensure access to the MicroPython REPL.
"""

# pylint: disable=import-error, broad-exception-caught

from time import sleep
import uos # type: ignore
from machine import reset_cause, SOFT_RESET, UART, I2C # type: ignore
from sdk.usb import UsbHub # type: ignore
from sdk.dio import DigitalIO # type: ignore

USB = UsbHub(
    i2c=I2C(2, freq=100_000),
    power=DigitalIO(pin="PWR_HUB", value=True),
    reset=DigitalIO(pin="HUB_RST", value=True),
)

# fmt: off
# pylint: disable=line-too-long
PAGE_SIZE = 0x20
CONFIG = [
    0x24,		# Vendor ID LSB
    0x04,		# Vendor ID MSB
    0x14,		# Product ID LSB
    0x25,		# Product ID MSB
    0xB3,		# Device ID LSB
    0x0B,		# Device ID MSB
    0xBB,		# Configuration Data Byte 1
    0x20,		# Configuration Data Byte 2
    0x09,		# Configuration Data Byte 3
    0x00,		# Non-Removable Devices
    0x00,		# Port Disable (Self)
    0x00,		# Port Disable (Bus)
    0x32,		# Max Power (Self)
    0xFA,		# Max Power (Bus)
    0x32,		# Hub Controller Max Current (Self)
    0xFA,		# Hub Controller Max Current (Bus)
    0x64,		# Power-on Time
    0x04,		# Language ID High (Turkish:0x041F, English:0x0409)
    0x09,		# Language ID Low
    0x08,		# Manufacturer String Length
    0x0F,		# Product String Length
    0x00,		# Serial String Length

    # Manufacturer String (max 31 character)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00,

    # Product String (max 31 character)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00,

    # Serial String (max 31 character)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00,

    0x00,		# Battery charging enable

    # Reserved
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x00,		# Boost_Up
		0x00,		# Reserved
		0x00,		# Boost_4:0
		0x00,		# Reserved
		0x1A,		# Port Swap
		0x00,		# Port Map 2-1
		0x00,		# Port Map 4-3
		0x00,		# Reserved
		0x00,		# Reserved
		0x00,		# Status/Command
]
CONFIG = [[PAGE_SIZE] + CONFIG[i:i + PAGE_SIZE] for i in range(0, len(CONFIG), PAGE_SIZE)]
PORTS = [0x04, 0x21, 0x43, 0x65, 0x07]
ATTACH = [0x01, 0x01]
# pylint: enable=line-too-long
# fmt: on

if reset_cause() != SOFT_RESET:
    try:
        DigitalIO(pin='PWR_PER', value=True)
        DigitalIO(pin="USB_FS_VB", value=True)

        USB.on()
        sleep(1)
        USB.reset()
        USB.enable(config=CONFIG, ports=PORTS, attach=ATTACH)
        print('USB Hub enabled')
    except Exception:
        uart = UART(3, baudrate=115200)
        uos.dupterm(uart)
